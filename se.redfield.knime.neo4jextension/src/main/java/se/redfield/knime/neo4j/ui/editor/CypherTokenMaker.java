/* The following code was generated by JFlex 1.4.1 on 12/8/23, 8:54 AM */

/*
 * Generated on 12/8/23, 8:54 AM
 */
package se.redfield.knime.neo4j.ui.editor;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * 
 */

public class CypherTokenMaker extends AbstractJFlexTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\16\1\7\1\0\1\16\1\15\22\0\1\16\1\34\1\14"+
    "\1\0\1\1\1\35\1\60\1\6\2\33\1\35\1\36\1\15\1\21"+
    "\1\17\1\35\1\3\3\3\4\5\2\2\1\34\1\15\1\61\1\57"+
    "\1\62\1\34\1\0\1\30\1\4\1\45\1\43\1\20\1\26\1\46"+
    "\1\37\1\41\1\53\1\54\1\31\1\55\1\44\1\50\1\40\1\56"+
    "\1\24\1\32\1\22\1\11\1\51\1\42\1\52\1\47\1\1\1\33"+
    "\1\10\1\33\1\34\1\1\1\0\1\30\1\13\1\45\1\43\1\20"+
    "\1\27\1\46\1\37\1\41\1\53\1\54\1\31\1\55\1\12\1\50"+
    "\1\40\1\56\1\25\1\32\1\23\1\11\1\51\1\42\1\52\1\47"+
    "\1\1\1\33\1\63\1\33\1\34\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\1\1\3\1\4\2\1\1\5"+
    "\1\6\2\1\1\7\6\1\1\10\3\7\13\1\4\7"+
    "\1\0\1\11\1\0\1\11\1\12\1\3\1\13\1\0"+
    "\1\3\4\1\2\5\1\14\1\15\12\1\1\12\7\1"+
    "\1\12\12\1\1\12\5\1\1\0\1\15\1\0\1\3"+
    "\1\16\2\3\1\13\1\3\4\1\1\5\1\17\1\5"+
    "\1\12\5\1\1\12\1\1\1\12\25\1\1\0\1\3"+
    "\2\1\1\5\17\1\1\0\1\3\1\5\7\1\1\0"+
    "\1\3\1\5\7\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[177];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\64\0\u0138"+
    "\0\u016c\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8"+
    "\0\u030c\0\u0340\0\u0374\0\u03a8\0\64\0\64\0\u03dc\0\u0410"+
    "\0\u0444\0\u0478\0\u04ac\0\u04e0\0\u0514\0\u0548\0\u057c\0\u05b0"+
    "\0\u05e4\0\u0618\0\u064c\0\u0680\0\u06b4\0\u06e8\0\u071c\0\u0750"+
    "\0\u0784\0\u0208\0\u07b8\0\150\0\u07ec\0\64\0\u0820\0\u0854"+
    "\0\u0888\0\u08bc\0\u08f0\0\u0924\0\u0958\0\u098c\0\64\0\u09c0"+
    "\0\u09f4\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60"+
    "\0\u0b94\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64\0\u0c98\0\u0ccc\0\u0d00"+
    "\0\u0d34\0\u0d68\0\u0d9c\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c\0\u0ea0"+
    "\0\u0ed4\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8\0\u100c\0\u1040"+
    "\0\u1074\0\u10a8\0\u10dc\0\u1110\0\u1144\0\u1178\0\u11ac\0\64"+
    "\0\u11e0\0\u1214\0\u0820\0\u1248\0\u127c\0\u12b0\0\u12e4\0\u1318"+
    "\0\u134c\0\64\0\u1380\0\u13b4\0\u13e8\0\u141c\0\u1450\0\u1484"+
    "\0\u14b8\0\u14ec\0\u1520\0\u1554\0\u1588\0\u15bc\0\u15f0\0\u1624"+
    "\0\u1658\0\u168c\0\u16c0\0\u16f4\0\u1728\0\u175c\0\u1790\0\u17c4"+
    "\0\u17f8\0\u182c\0\u1860\0\u1894\0\u18c8\0\u18fc\0\u1930\0\u1964"+
    "\0\u1998\0\u19cc\0\u1a00\0\u1a34\0\u1a68\0\u1a9c\0\u1ad0\0\u1b04"+
    "\0\u1b38\0\u1b6c\0\u1ba0\0\u1bd4\0\u1c08\0\u13b4\0\u1c3c\0\u1c70"+
    "\0\u1ca4\0\u1cd8\0\u1d0c\0\u1d40\0\u1d74\0\u1da8\0\u1ddc\0\u1e10"+
    "\0\u1e44\0\u1e78\0\u1eac\0\u1ee0\0\u1f14\0\u1f48\0\u1f7c\0\u1fb0"+
    "\0\u1fe4\0\u2018\0\u204c\0\u2080\0\u20b4\0\u20e8\0\u211c\0\u2150"+
    "\0\u2184";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[177];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\4\1\6\1\7\1\2"+
    "\1\10\1\11\1\5\1\12\1\2\1\13\1\14\1\15"+
    "\1\16\2\17\2\20\2\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\3\1\32\1\33\1\34"+
    "\1\11\1\35\1\3\1\36\1\37\1\3\1\40\1\41"+
    "\1\42\1\43\1\3\1\27\1\44\1\45\1\46\1\47"+
    "\65\0\5\3\2\0\1\50\3\3\4\0\1\3\1\0"+
    "\11\3\4\0\20\3\5\0\2\51\2\4\1\51\1\4"+
    "\2\0\4\51\3\0\1\52\1\53\1\0\11\51\4\0"+
    "\20\51\6\0\5\3\2\0\1\50\3\3\4\0\1\3"+
    "\1\0\11\3\4\0\10\3\1\54\7\3\5\0\6\55"+
    "\1\56\1\57\1\60\53\55\1\0\5\3\2\0\1\50"+
    "\1\3\1\61\1\3\4\0\1\3\1\0\10\3\1\62"+
    "\4\0\5\3\1\61\12\3\6\0\5\3\2\0\1\50"+
    "\1\63\2\3\4\0\1\3\1\0\11\3\4\0\11\3"+
    "\1\64\6\3\5\0\7\12\1\65\1\66\3\12\1\67"+
    "\47\12\16\0\1\13\47\0\2\70\1\0\1\70\57\0"+
    "\5\3\2\0\1\50\1\3\1\71\1\3\4\0\1\3"+
    "\1\0\7\3\1\72\1\3\4\0\5\3\1\71\5\3"+
    "\1\73\4\3\26\0\1\26\35\0\1\26\5\0\5\3"+
    "\2\0\1\50\3\3\4\0\1\3\1\0\2\3\2\74"+
    "\5\3\4\0\1\75\17\3\6\0\5\3\2\0\1\50"+
    "\3\3\4\0\1\76\1\0\11\3\4\0\20\3\6\0"+
    "\5\3\2\0\1\50\3\3\4\0\1\3\1\0\6\3"+
    "\1\77\2\3\4\0\11\3\1\100\6\3\6\0\5\3"+
    "\2\0\1\50\1\3\1\101\1\3\4\0\1\3\1\0"+
    "\7\3\1\102\1\103\4\0\4\3\2\101\12\3\6\0"+
    "\5\3\2\0\1\50\3\3\4\0\1\3\1\0\11\3"+
    "\4\0\2\3\1\104\6\3\1\105\6\3\6\0\5\3"+
    "\2\0\1\50\3\3\4\0\1\106\1\0\2\107\7\3"+
    "\4\0\6\3\1\110\6\3\1\111\2\3\64\0\1\26"+
    "\42\0\1\26\20\0\1\26\5\0\5\3\2\0\1\50"+
    "\3\3\4\0\1\3\1\0\11\3\4\0\2\3\1\112"+
    "\15\3\6\0\5\3\2\0\1\50\1\3\1\113\1\3"+
    "\4\0\1\3\1\0\10\3\1\54\4\0\5\3\1\113"+
    "\12\3\6\0\5\3\2\0\1\50\3\3\4\0\1\3"+
    "\1\0\11\3\4\0\1\114\1\3\1\115\15\3\6\0"+
    "\5\3\2\0\1\50\3\3\4\0\1\116\1\0\2\3"+
    "\2\117\5\3\4\0\2\3\1\120\6\3\1\54\6\3"+
    "\6\0\5\3\2\0\1\50\3\3\4\0\1\3\1\0"+
    "\2\3\2\121\2\3\1\122\1\3\1\123\4\0\11\3"+
    "\1\124\6\3\6\0\5\3\2\0\1\50\3\3\4\0"+
    "\1\3\1\0\11\3\4\0\2\3\1\125\15\3\6\0"+
    "\5\3\2\0\1\50\1\3\1\54\1\3\4\0\1\3"+
    "\1\0\2\3\2\126\2\54\3\3\4\0\1\3\1\127"+
    "\3\3\1\54\12\3\6\0\5\3\2\0\1\50\3\3"+
    "\4\0\1\3\1\0\11\3\4\0\11\3\1\130\6\3"+
    "\6\0\5\3\2\0\1\50\3\3\4\0\1\3\1\0"+
    "\11\3\4\0\11\3\1\131\6\3\6\0\5\3\2\0"+
    "\1\50\3\3\4\0\1\5\1\0\11\3\4\0\20\3"+
    "\6\0\5\3\2\0\1\50\3\3\4\0\1\132\1\0"+
    "\6\3\1\133\2\3\4\0\20\3\65\0\1\26\64\0"+
    "\1\27\64\0\1\27\64\0\1\26\11\0\1\134\52\0"+
    "\6\51\2\0\4\51\4\0\1\51\1\0\11\51\4\0"+
    "\20\51\5\0\2\51\2\135\1\51\1\135\2\0\4\51"+
    "\4\0\1\51\1\136\11\51\3\0\1\136\20\51\5\0"+
    "\6\137\1\140\1\0\54\137\6\0\1\140\55\0\3\137"+
    "\1\141\1\137\1\142\1\143\1\0\1\55\1\144\3\55"+
    "\6\137\1\55\1\137\1\55\1\137\1\55\34\137\1\0"+
    "\5\3\2\0\1\50\3\3\4\0\1\3\1\0\11\3"+
    "\4\0\2\3\1\145\1\146\14\3\6\0\5\3\2\0"+
    "\1\50\3\3\4\0\1\3\1\0\11\3\4\0\2\3"+
    "\1\147\15\3\6\0\5\3\2\0\1\50\3\3\4\0"+
    "\1\3\1\0\7\3\1\102\1\3\4\0\20\3\6\0"+
    "\5\3\2\0\1\50\3\3\4\0\1\3\1\0\2\54"+
    "\7\3\4\0\4\3\1\150\13\3\5\0\10\65\1\151"+
    "\3\65\1\152\52\65\1\12\1\65\2\12\1\0\1\12"+
    "\1\153\3\12\6\65\1\12\1\65\1\12\1\65\1\12"+
    "\34\65\2\51\2\70\1\51\1\70\2\0\4\51\4\0"+
    "\1\53\1\0\11\51\4\0\20\51\6\0\5\3\2\0"+
    "\1\50\3\3\4\0\1\3\1\0\11\3\4\0\4\3"+
    "\1\154\13\3\6\0\5\3\2\0\1\50\3\3\4\0"+
    "\1\3\1\0\10\3\1\150\4\0\20\3\6\0\5\3"+
    "\2\0\1\50\3\3\4\0\1\3\1\0\11\3\4\0"+
    "\2\3\1\155\15\3\6\0\5\3\2\0\1\50\1\150"+
    "\2\3\4\0\1\3\1\0\11\3\4\0\20\3\6\0"+
    "\5\3\2\0\1\50\3\3\4\0\1\156\1\0\11\3"+
    "\4\0\20\3\6\0\5\3\2\0\1\50\3\3\4\0"+
    "\1\3\1\0\2\157\7\3\4\0\16\3\1\160\1\161"+
    "\6\0\5\3\2\0\1\50\3\3\4\0\1\3\1\0"+
    "\7\3\1\72\1\3\4\0\20\3\6\0\5\3\2\0"+
    "\1\50\3\3\4\0\1\3\1\0\2\3\2\162\5\3"+
    "\4\0\20\3\6\0\5\3\2\0\1\50\3\3\4\0"+
    "\1\3\1\0\11\3\4\0\4\3\1\54\13\3\6\0"+
    "\5\3\2\0\1\50\3\3\4\0\1\3\1\0\7\3"+
    "\1\54\1\3\4\0\20\3\6\0\5\3\2\0\1\50"+
    "\3\3\4\0\1\3\1\0\10\3\1\163\4\0\6\3"+
    "\1\164\11\3\6\0\5\3\2\0\1\50\3\3\4\0"+
    "\1\3\1\0\11\3\4\0\16\3\1\165\1\3\6\0"+
    "\5\3\2\0\1\50\3\3\4\0\1\3\1\0\6\3"+
    "\1\101\2\3\4\0\20\3\6\0\5\3\2\0\1\50"+
    "\3\3\4\0\1\3\1\0\2\54\7\3\4\0\20\3"+
    "\6\0\5\3\2\0\1\50\3\3\4\0\1\3\1\0"+
    "\6\3\1\166\2\3\4\0\20\3\6\0\5\3\2\0"+
    "\1\50\3\3\4\0\1\3\1\0\6\3\1\167\2\3"+
    "\4\0\20\3\6\0\5\3\2\0\1\50\3\3\4\0"+
    "\1\3\1\0\11\3\4\0\2\3\1\170\15\3\6\0"+
    "\5\3\2\0\1\50\1\3\1\171\1\3\4\0\1\3"+
    "\1\0\11\3\4\0\5\3\1\171\12\3\6\0\5\3"+
    "\2\0\1\50\3\3\4\0\1\3\1\0\11\3\4\0"+
    "\4\3\1\172\13\3\6\0\5\3\2\0\1\50\3\3"+
    "\4\0\1\173\1\0\11\3\4\0\20\3\6\0\5\3"+
    "\2\0\1\50\3\3\4\0\1\3\1\0\2\174\7\3"+
    "\4\0\20\3\6\0\5\3\2\0\1\50\3\3\4\0"+
    "\1\3\1\0\2\175\5\3\1\176\1\177\4\0\20\3"+
    "\6\0\5\3\2\0\1\50\3\3\4\0\1\3\1\0"+
    "\11\3\4\0\11\3\1\170\6\3\6\0\5\3\2\0"+
    "\1\50\3\3\4\0\1\3\1\0\10\3\1\200\4\0"+
    "\20\3\6\0\5\3\2\0\1\50\3\3\4\0\1\201"+
    "\1\0\11\3\4\0\20\3\6\0\5\3\2\0\1\50"+
    "\3\3\4\0\1\3\1\0\7\3\1\102\1\150\4\0"+
    "\20\3\6\0\5\3\2\0\1\50\3\3\4\0\1\3"+
    "\1\0\11\3\4\0\12\3\1\54\5\3\6\0\5\3"+
    "\2\0\1\50\1\202\1\203\1\3\4\0\1\3\1\0"+
    "\11\3\4\0\5\3\1\203\12\3\6\0\5\3\2\0"+
    "\1\50\3\3\4\0\1\204\1\0\11\3\4\0\20\3"+
    "\6\0\5\3\2\0\1\50\3\3\4\0\1\3\1\0"+
    "\11\3\4\0\4\3\1\205\13\3\6\0\5\3\2\0"+
    "\1\50\3\3\4\0\1\3\1\0\2\206\7\3\4\0"+
    "\20\3\6\0\5\3\2\0\1\50\3\3\4\0\1\3"+
    "\1\0\2\3\2\54\5\3\4\0\20\3\6\0\5\3"+
    "\2\0\1\50\3\3\4\0\1\3\1\0\11\3\4\0"+
    "\2\3\1\156\15\3\6\0\5\3\2\0\1\50\3\3"+
    "\4\0\1\3\1\0\2\3\2\207\5\3\4\0\20\3"+
    "\6\0\5\3\2\0\1\50\1\3\1\210\1\3\4\0"+
    "\1\3\1\0\2\211\7\3\4\0\5\3\1\210\12\3"+
    "\7\0\4\212\5\0\1\212\4\0\1\212\5\0\3\212"+
    "\12\0\1\212\1\0\1\212\16\0\2\51\2\135\1\51"+
    "\1\135\2\0\4\51\4\0\1\51\1\0\11\51\4\0"+
    "\20\51\7\0\2\135\1\0\1\135\56\0\6\137\1\56"+
    "\1\0\57\137\1\142\1\137\1\142\1\140\1\0\57\137"+
    "\1\55\1\137\1\55\1\140\1\0\56\137\4\213\1\56"+
    "\1\0\3\137\1\213\4\137\1\213\5\137\3\213\12\137"+
    "\1\213\1\137\1\213\16\137\1\0\5\3\2\0\1\50"+
    "\3\3\4\0\1\3\1\0\11\3\4\0\11\3\1\156"+
    "\5\3\1\74\6\0\5\3\2\0\1\50\3\3\4\0"+
    "\1\3\1\0\11\3\4\0\2\3\1\214\15\3\6\0"+
    "\5\3\2\0\1\50\1\3\1\215\1\3\4\0\1\3"+
    "\1\0\11\3\4\0\5\3\1\215\12\3\6\0\5\3"+
    "\2\0\1\50\3\3\4\0\1\54\1\0\11\3\4\0"+
    "\20\3\5\0\7\65\1\0\56\65\4\216\2\65\1\151"+
    "\2\65\1\216\1\152\3\65\1\216\5\65\3\216\12\65"+
    "\1\216\1\65\1\216\16\65\1\0\5\3\2\0\1\50"+
    "\3\3\4\0\1\3\1\0\10\3\1\54\4\0\20\3"+
    "\6\0\5\3\2\0\1\50\3\3\4\0\1\3\1\0"+
    "\10\3\1\171\4\0\20\3\6\0\5\3\2\0\1\50"+
    "\1\3\1\54\1\3\4\0\1\3\1\0\11\3\4\0"+
    "\5\3\1\54\12\3\6\0\5\3\2\0\1\50\1\217"+
    "\2\3\4\0\1\3\1\0\11\3\4\0\20\3\6\0"+
    "\5\3\2\0\1\50\3\3\4\0\1\3\1\0\11\3"+
    "\4\0\11\3\1\220\6\3\6\0\5\3\2\0\1\50"+
    "\1\221\2\3\4\0\1\3\1\0\11\3\4\0\20\3"+
    "\6\0\5\3\2\0\1\50\3\3\4\0\1\175\1\0"+
    "\11\3\4\0\20\3\6\0\5\3\2\0\1\50\3\3"+
    "\4\0\1\222\1\0\11\3\4\0\20\3\6\0\5\3"+
    "\2\0\1\50\3\3\4\0\1\223\1\0\11\3\4\0"+
    "\20\3\6\0\5\3\2\0\1\50\3\3\4\0\1\3"+
    "\1\0\11\3\4\0\2\3\1\106\15\3\6\0\5\3"+
    "\2\0\1\50\3\3\4\0\1\3\1\0\2\3\2\224"+
    "\5\3\4\0\20\3\6\0\5\3\2\0\1\50\1\3"+
    "\1\54\1\3\4\0\1\3\1\0\7\3\1\225\1\3"+
    "\4\0\5\3\1\54\12\3\6\0\5\3\2\0\1\50"+
    "\3\3\4\0\1\3\1\0\11\3\4\0\1\3\1\54"+
    "\16\3\6\0\5\3\2\0\1\50\3\3\4\0\1\3"+
    "\1\0\2\226\7\3\4\0\20\3\6\0\5\3\2\0"+
    "\1\50\3\3\4\0\1\227\1\0\11\3\4\0\20\3"+
    "\6\0\5\3\2\0\1\50\1\3\1\54\1\3\4\0"+
    "\1\3\1\0\2\3\2\150\5\3\4\0\5\3\1\54"+
    "\12\3\6\0\5\3\2\0\1\50\3\3\4\0\1\3"+
    "\1\0\11\3\4\0\1\54\17\3\6\0\5\3\2\0"+
    "\1\50\3\3\4\0\1\3\1\0\6\3\1\211\2\3"+
    "\4\0\20\3\6\0\5\3\2\0\1\50\3\3\4\0"+
    "\1\230\1\0\11\3\4\0\20\3\6\0\5\3\2\0"+
    "\1\50\3\3\4\0\1\3\1\0\11\3\4\0\6\3"+
    "\1\164\11\3\6\0\5\3\2\0\1\50\3\3\4\0"+
    "\1\3\1\0\2\231\7\3\4\0\20\3\6\0\5\3"+
    "\2\0\1\50\3\3\4\0\1\3\1\0\6\3\1\230"+
    "\2\3\4\0\20\3\6\0\5\3\2\0\1\50\1\3"+
    "\1\106\1\3\4\0\1\3\1\0\11\3\4\0\5\3"+
    "\1\106\12\3\6\0\5\3\2\0\1\50\3\3\4\0"+
    "\1\3\1\0\2\232\6\3\1\233\4\0\20\3\6\0"+
    "\5\3\2\0\1\50\3\3\4\0\1\3\1\0\7\3"+
    "\1\101\1\3\4\0\20\3\6\0\5\3\2\0\1\50"+
    "\3\3\4\0\1\130\1\0\11\3\4\0\20\3\6\0"+
    "\5\3\2\0\1\50\3\3\4\0\1\3\1\0\11\3"+
    "\4\0\2\3\1\234\15\3\6\0\5\3\2\0\1\50"+
    "\3\3\4\0\1\3\1\0\11\3\4\0\7\3\1\150"+
    "\10\3\6\0\5\3\2\0\1\50\3\3\4\0\1\3"+
    "\1\0\11\3\4\0\4\3\1\235\13\3\6\0\5\3"+
    "\2\0\1\50\3\3\4\0\1\3\1\0\11\3\4\0"+
    "\6\3\1\174\11\3\7\0\4\236\5\0\1\236\4\0"+
    "\1\236\5\0\3\236\12\0\1\236\1\0\1\236\16\0"+
    "\2\137\4\237\1\56\1\0\3\137\1\237\4\137\1\237"+
    "\5\137\3\237\12\137\1\237\1\137\1\237\16\137\1\0"+
    "\5\3\2\0\1\50\1\3\1\101\1\3\4\0\1\3"+
    "\1\0\11\3\4\0\5\3\1\101\12\3\6\0\5\3"+
    "\2\0\1\50\3\3\4\0\1\3\1\0\11\3\4\0"+
    "\7\3\1\54\10\3\5\0\2\65\4\240\2\65\1\151"+
    "\2\65\1\240\1\152\3\65\1\240\5\65\3\240\12\65"+
    "\1\240\1\65\1\240\16\65\1\0\5\3\2\0\1\50"+
    "\3\3\4\0\1\3\1\0\2\3\2\156\5\3\4\0"+
    "\20\3\6\0\5\3\2\0\1\50\3\3\4\0\1\3"+
    "\1\0\11\3\4\0\12\3\1\150\5\3\6\0\5\3"+
    "\2\0\1\50\3\3\4\0\1\3\1\0\11\3\4\0"+
    "\2\3\1\241\15\3\6\0\5\3\2\0\1\50\3\3"+
    "\4\0\1\3\1\0\2\3\2\106\5\3\4\0\20\3"+
    "\6\0\5\3\2\0\1\50\1\3\1\242\1\3\4\0"+
    "\1\3\1\0\11\3\4\0\5\3\1\242\12\3\6\0"+
    "\5\3\2\0\1\50\3\3\4\0\1\3\1\0\2\154"+
    "\7\3\4\0\20\3\6\0\5\3\2\0\1\50\3\3"+
    "\4\0\1\3\1\0\6\3\1\130\2\3\4\0\20\3"+
    "\6\0\5\3\2\0\1\50\3\3\4\0\1\3\1\0"+
    "\11\3\4\0\13\3\1\54\4\3\6\0\5\3\2\0"+
    "\1\50\3\3\4\0\1\3\1\0\2\150\7\3\4\0"+
    "\20\3\6\0\5\3\2\0\1\50\3\3\4\0\1\3"+
    "\1\0\11\3\4\0\2\3\1\243\15\3\6\0\5\3"+
    "\2\0\1\50\3\3\4\0\1\3\1\0\6\3\1\244"+
    "\2\3\4\0\20\3\6\0\5\3\2\0\1\50\3\3"+
    "\4\0\1\3\1\0\2\245\7\3\4\0\20\3\6\0"+
    "\5\3\2\0\1\50\3\3\4\0\1\3\1\0\11\3"+
    "\4\0\11\3\1\246\6\3\6\0\5\3\2\0\1\50"+
    "\3\3\4\0\1\3\1\0\6\3\1\247\2\3\4\0"+
    "\20\3\7\0\4\250\5\0\1\250\4\0\1\250\5\0"+
    "\3\250\12\0\1\250\1\0\1\250\16\0\2\137\4\251"+
    "\1\56\1\0\3\137\1\251\4\137\1\251\5\137\3\251"+
    "\12\137\1\251\1\137\1\251\16\137\2\65\4\252\2\65"+
    "\1\151\2\65\1\252\1\152\3\65\1\252\5\65\3\252"+
    "\12\65\1\252\1\65\1\252\16\65\1\0\5\3\2\0"+
    "\1\50\3\3\4\0\1\3\1\0\2\3\2\150\5\3"+
    "\4\0\20\3\6\0\5\3\2\0\1\50\3\3\4\0"+
    "\1\3\1\0\11\3\4\0\4\3\1\62\13\3\6\0"+
    "\5\3\2\0\1\50\1\3\1\253\1\3\4\0\1\3"+
    "\1\0\11\3\4\0\5\3\1\253\12\3\6\0\5\3"+
    "\2\0\1\50\3\3\4\0\1\3\1\0\11\3\4\0"+
    "\2\3\1\254\15\3\6\0\5\3\2\0\1\50\3\3"+
    "\4\0\1\3\1\0\2\3\2\255\5\3\4\0\20\3"+
    "\6\0\5\3\2\0\1\50\1\3\1\256\1\3\4\0"+
    "\1\3\1\0\11\3\4\0\5\3\1\256\12\3\6\0"+
    "\5\3\2\0\1\50\3\3\4\0\1\3\1\0\2\257"+
    "\7\3\4\0\20\3\7\0\4\3\5\0\1\3\4\0"+
    "\1\3\5\0\3\3\12\0\1\3\1\0\1\3\16\0"+
    "\2\137\4\55\1\56\1\0\3\137\1\55\4\137\1\55"+
    "\5\137\3\55\12\137\1\55\1\137\1\55\16\137\2\65"+
    "\4\12\2\65\1\151\2\65\1\12\1\152\3\65\1\12"+
    "\5\65\3\12\12\65\1\12\1\65\1\12\16\65\1\0"+
    "\5\3\2\0\1\50\3\3\4\0\1\3\1\0\11\3"+
    "\4\0\6\3\1\106\11\3\6\0\5\3\2\0\1\50"+
    "\1\3\1\226\1\3\4\0\1\3\1\0\11\3\4\0"+
    "\5\3\1\226\12\3\6\0\5\3\2\0\1\50\3\3"+
    "\4\0\1\3\1\0\6\3\1\260\2\3\4\0\20\3"+
    "\6\0\5\3\2\0\1\50\3\3\4\0\1\3\1\0"+
    "\6\3\1\102\2\3\4\0\20\3\6\0\5\3\2\0"+
    "\1\50\3\3\4\0\1\3\1\0\11\3\4\0\11\3"+
    "\1\261\6\3\6\0\5\3\2\0\1\50\3\3\4\0"+
    "\1\3\1\0\11\3\4\0\2\3\1\202\15\3\6\0"+
    "\5\3\2\0\1\50\3\3\4\0\1\3\1\0\2\3"+
    "\2\5\5\3\4\0\20\3\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8632];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\15\1\2\11\21\1\1\0"+
    "\1\1\1\0\3\1\1\11\1\0\7\1\1\11\44\1"+
    "\1\0\1\1\1\0\1\1\1\11\11\1\1\11\37\1"+
    "\1\0\23\1\1\0\11\1\1\0\11\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[177];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public CypherTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * {@inheritDoc}
	 */
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return null;
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
			/* No multi-line comments */
			/* No documentation comments */
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CypherTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public CypherTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 192) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 10: 
          { addToken(Token.RESERVED_WORD);
          }
        case 16: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 17: break;
        case 13: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 18: break;
        case 12: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 19: break;
        case 3: 
          { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 20: break;
        case 6: 
          { addToken(Token.WHITESPACE);
          }
        case 21: break;
        case 11: 
          { addToken(Token.ERROR_CHAR);
          }
        case 22: break;
        case 9: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 23: break;
        case 7: 
          { addToken(Token.OPERATOR);
          }
        case 24: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 25: break;
        case 14: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 26: break;
        case 5: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 27: break;
        case 4: 
          { addNullToken(); return firstToken;
          }
        case 28: break;
        case 15: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 29: break;
        case 8: 
          { addToken(Token.SEPARATOR);
          }
        case 30: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 178: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
