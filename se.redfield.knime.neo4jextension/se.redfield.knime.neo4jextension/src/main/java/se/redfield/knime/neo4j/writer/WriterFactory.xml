<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE knimeNode PUBLIC "-//UNIKN//DTD KNIME Node 2.0//EN" "http://www.knime.org/Node.dtd">
<knimeNode icon="/icons/neo4j-16x16.png" type="Sink">
	<name>Neo4j Writer</name>
	
	<shortDescription>
	    Neo4j Writer
	</shortDescription>
	
	<fullDescription>
		<intro>
			The node allows user to populate Neo4j with the data.
			<ul>
				<li>Script - active when there is no input table connected. User can create a Cypher script with injections of labels for nodes and relationships, and available server functions to populate the database.</li>
				<li>Schema is fetched with functions db.labels, db.relationshipTypes, dbms.functions.</li>
				<li>Query from table - if the table is connected, then user can select the string column that contains Cypher queries. Output will always be a JSON column.</li>
			</ul>
		</intro>
		<tab name="Script">
			<option name="Stop on query failure">if active the node will return an error and stop execution in case the query was not successfully executed. Otherwise node will produce an empty table and a warning message.</option>
			<option name="Script body">the text box, where use can put Cypher query with nodes, relationship, function and flow variables injections.</option>
		</tab>
		<tab name="Query from table">
			<option name="Column with query">queries from the selected string column will be executed. Results and status will be returned as a JSON column.</option>
			<option name="Stop on query failure">if active the node will return an error and stop execution in case the query was not successfully executed. Otherwise node will produce an empty table and a warning message. All the transactions will be rolled back.</option>
			<option name="Use asynchronous query execution">if active all the queries will be running in asynchronous mode, otherwise there will be consequent execution starting from the top of the table.</option>
		</tab>
	</fullDescription>
	
	<ports>
		<inPort index="0"  name="Input table" optional="true">Table with the Cypher query</inPort>
		<inPort index="1"  name="Neo4j connection">Neo4j connection</inPort>
 	    <outPort index="0" name="Neo4j Output">JSON response</outPort>
		<outPort index="1"  name="Neo4j connection">Neo4j connection</outPort>
	</ports>
</knimeNode>